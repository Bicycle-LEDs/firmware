name: Publish firmware

on:
 workflow_dispatch:


jobs:

  # Sketch new release

  sketch-release:

    runs-on: ubuntu-latest

    steps:

      # Clone repository
      
      - name: Clone repository
        uses: actions/checkout@main

      # Read version file

      - name: Read version file
        id: version
        uses: juliangruber/read-file-action@master
        with:
          path: ./updater/version.txt

      # Generate release sketch

      - name: Create release sketch
        uses: ncipollo/release-action@main
        with:
          draft: true
          allowUpdates: true
          tag: ${{steps.version.outputs.content}}
          name: Release ${{steps.version.outputs.content}}
          token: ${{ secrets.GITHUB_TOKEN }}

  # Compile code

  compile:

    needs: [ sketch-release ]
    runs-on: macos-latest
    
    steps:

      # Clone repository
      
      - name: Clone repository
        uses: actions/checkout@main

      # Setup arduino CLI
      
      - name: Setup Arduino CLI
        uses: arduino/setup-arduino-cli@master

      # Configure platform
      
      - name: Configure platform
        run: |
          arduino-cli config init 
          arduino-cli config set library.enable_unsafe_install true
          arduino-cli core update-index --additional-urls https://arduino.esp8266.com/stable/package_esp8266com_index.json
          arduino-cli core install esp8266:esp8266 --additional-urls https://arduino.esp8266.com/stable/package_esp8266com_index.json
          arduino-cli lib install "Adafruit NeoPixel"
          arduino-cli lib install --git-url https://github.com/me-no-dev/ESPAsyncWebServer.git https://github.com/me-no-dev/ESPAsyncTCP.git
          
      # Compile
      
      - name: Compile sketch
        run: |
          arduino-cli compile -b "esp8266:esp8266:nodemcuv2" -e ./sketch
      
      # Move file to better place

      - name: Find compiled file
        run: |
          cp ./sketch/build/*.*.*/*.ino.bin ./firmware.bin

      # Upload to artifacts

      - name: Upload to artifacts
        uses: actions/upload-artifact@main
        with:
          name: firmware.bin
          path: firmware.bin
        
      # Read version file

      - name: Read version file
        id: version
        uses: juliangruber/read-file-action@master
        with:
          path: ./updater/version.txt

      # Add artifacts to release

      - name: Add to release
        uses: ncipollo/release-action@main
        with:
          draft: true
          allowUpdates: true
          tag: ${{ steps.version.outputs.content }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: "firmware.bin"

  # Publish new release

  publish-release:

    runs-on: ubuntu-latest
    needs: [ compile ]

    steps:

      # Clone repository

      - name: Clone repository
        uses: actions/checkout@main

      # Download new firmware from artifacts

      - name: Download new firmwares
        uses: actions/download-artifact@main
        with:
          path: ./updater

      # Remove old firmware folder & update version file

      - name: Remove old firmwares
        run: 
          rm -rf ./updater/firmware.bin || true
          cp ./updater/firmware.bin/firmware.bin ./updater/firmware.bin
          rm -rf ./updater/version-check.txt || true
          cp ./updater/version.txt ./updater/version-check.txt

      # Read version file

      - name: Read version file
        id: version
        uses: juliangruber/read-file-action@master
        with:
          path: ./updater/version.txt

      # Update repository

      - name: Push firmwares to repository
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "üèóÔ∏è Build ${{steps.version.outputs.content}}" || true
          git push || true

      # Publish release

      - name: Publish release
        uses: ncipollo/release-action@main
        with:
          tag: ${{ steps.version.outputs.content }}
          draft: false
          prerelease: false
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
          bodyFile: release.md